<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Argocd on Tdebian</title>
    <link>/tags/argocd/</link>
    <description>Recent content in Argocd on Tdebian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 15 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="/tags/argocd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3d Printer DAY!!</title>
      <link>/posts/printerday/</link>
      <pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/printerday/</guid>
      <description>&lt;h1 id=&#34;first-prints-with-the-bambu-lab-a1--ams&#34;&gt;First Prints with the Bambu Lab A1 + AMS&lt;/h1&gt;
&lt;p&gt;I recently picked up the &lt;strong&gt;A1 Lab and AMS&lt;/strong&gt; by Bambu Lab, and I have to sayâ€”this printer is fantastic. It worked right out of the box. After walking through the quick-start guide, I was ready to go. My first project? Printing some little toy octopuses for my son, Cassius.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/printer/castle.JPG&#34; alt=&#34;cassâ€™s castle image&#34;&gt;&lt;/p&gt;
&lt;p&gt;What impressed me most was the simplicity. I connected to the printer using the &lt;strong&gt;Bambu Handy&lt;/strong&gt; app, tapped a few buttons, and had prints running almost immediately. For the first few jobs, I used the default models and settings right from the app.&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;first-prints-with-the-bambu-lab-a1--ams&#34;&gt;First Prints with the Bambu Lab A1 + AMS&lt;/h1&gt;
&lt;p&gt;I recently picked up the &lt;strong&gt;A1 Lab and AMS&lt;/strong&gt; by Bambu Lab, and I have to sayâ€”this printer is fantastic. It worked right out of the box. After walking through the quick-start guide, I was ready to go. My first project? Printing some little toy octopuses for my son, Cassius.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/printer/castle.JPG&#34; alt=&#34;cassâ€™s castle image&#34;&gt;&lt;/p&gt;
&lt;p&gt;What impressed me most was the simplicity. I connected to the printer using the &lt;strong&gt;Bambu Handy&lt;/strong&gt; app, tapped a few buttons, and had prints running almost immediately. For the first few jobs, I used the default models and settings right from the app.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;taking-it-further-with-bambu-studio&#34;&gt;Taking It Further with Bambu Studio&lt;/h2&gt;
&lt;p&gt;After a few quick wins, I started experimenting with &lt;strong&gt;Bambu Studio&lt;/strong&gt;â€”their full-featured slicer app. Itâ€™s a lot more powerful and lets me arrange parts on the print plate much more efficiently. When I learn more about tuning print settings and workflow, Iâ€™ll try to write a proper walkthrough or tutorial.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;why-i-bought-a-3d-printer&#34;&gt;Why I Bought a 3D Printer&lt;/h2&gt;
&lt;p&gt;This wasnâ€™t just a toy purchaseâ€”I had a very specific goal:&lt;br&gt;
I wanted to print my own holds for my &lt;a href=&#34;https://tblog.tdebian.com/posts/theshed/&#34;&gt;DIY climbing wall&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Climbing holds are expensive. A basic pack of 12 costs over $50, and I needed way more than that. A friend printed a sample hold for me, and it held up surprisingly well. That convinced me to try it for myself.&lt;/p&gt;
&lt;p&gt;Here are some basic holds I printed right from my phone:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/printer/cholds.jpg&#34; alt=&#34;climbing hold image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;troubleshooting-bad-prints&#34;&gt;Troubleshooting Bad Prints&lt;/h2&gt;
&lt;p&gt;Not everything went smoothly. After a few successful jobs, prints started failing.&lt;/p&gt;
&lt;p&gt;Hereâ€™s one example of a botched key holder:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/printer/khold.jpg&#34; alt=&#34;key holder image&#34;&gt;&lt;/p&gt;
&lt;p&gt;It took me a while to figure out the problem, but it turned out to be two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Humidity&lt;/strong&gt; â€” my filament was absorbing moisture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A dirty build plate&lt;/strong&gt; â€” adhesion was inconsistent.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once I dried out the filament and cleaned the build surface, my prints were back to normal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/printer/headphone.JPG&#34; alt=&#34;headphone image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;Whatâ€™s Next&lt;/h2&gt;
&lt;p&gt;Iâ€™m planning to dive into &lt;strong&gt;FreeCAD&lt;/strong&gt; to start designing my own climbing holds and parts. Iâ€™m also really intrigued by the &lt;strong&gt;Gridfinity&lt;/strong&gt; storage system. My goal is to start designing modular storage and wall featuresâ€”combining Gridfinity with climbing hardware.&lt;/p&gt;
&lt;p&gt;Once I get deeper into CAD and slicing workflows, Iâ€™ll follow up with another post and some downloadable models.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Itâ€™s still early, but this printer has already opened the door to a whole new category of making. More to come soon.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>ArgoCD</title>
      <link>/posts/argocd/</link>
      <pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>/posts/argocd/</guid>
      <description>&lt;h1 id=&#34;bringing-up-argocd&#34;&gt;Bringing Up ArgoCD&lt;/h1&gt;
&lt;h2 id=&#34;day-one-with-argo&#34;&gt;Day One with Argo&lt;/h2&gt;
&lt;p&gt;Today I finally got ArgoCD up and running on my home cluster. I&amp;rsquo;m mostly following the &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/&#34;&gt;official docs&lt;/a&gt;, but as with most things in self-hosted Kubernetes, there were a few snags worth documenting.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;problem-1-ingress-conflicts-with-istio&#34;&gt;Problem 1: Ingress Conflicts with Istio&lt;/h2&gt;
&lt;p&gt;The first thing I noticed was that my current setup didnâ€™t play well with Argoâ€™s recommended &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#istio&#34;&gt;Istio ingress configuration&lt;/a&gt;. Iâ€™m not using Kustomize, and I run MetalLB instead of a cloud load balancer, so Iâ€™m not sure if thatâ€™s what broke itâ€”or if it&amp;rsquo;s just an Istio quirk.&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;bringing-up-argocd&#34;&gt;Bringing Up ArgoCD&lt;/h1&gt;
&lt;h2 id=&#34;day-one-with-argo&#34;&gt;Day One with Argo&lt;/h2&gt;
&lt;p&gt;Today I finally got ArgoCD up and running on my home cluster. I&amp;rsquo;m mostly following the &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/&#34;&gt;official docs&lt;/a&gt;, but as with most things in self-hosted Kubernetes, there were a few snags worth documenting.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;problem-1-ingress-conflicts-with-istio&#34;&gt;Problem 1: Ingress Conflicts with Istio&lt;/h2&gt;
&lt;p&gt;The first thing I noticed was that my current setup didnâ€™t play well with Argoâ€™s recommended &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#istio&#34;&gt;Istio ingress configuration&lt;/a&gt;. Iâ€™m not using Kustomize, and I run MetalLB instead of a cloud load balancer, so Iâ€™m not sure if thatâ€™s what broke itâ€”or if it&amp;rsquo;s just an Istio quirk.&lt;/p&gt;
&lt;p&gt;I didnâ€™t really need Argo exposed to the public internet anyway, so I pivoted. I exposed the UI with a basic MetalLB service and now itâ€™s accessible on my local network at &lt;code&gt;x.x.x.247&lt;/code&gt;. Thatâ€™s good enough for me, since I mostly plan to use the UI for prototyping.&lt;/p&gt;
&lt;p&gt;At work we rely entirely on the declarative setupâ€”and thatâ€™s my long-term goal here as well.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;problem-2-repo-organization--sidecar-gotchas&#34;&gt;Problem 2: Repo Organization &amp;amp; Sidecar Gotchas&lt;/h2&gt;
&lt;p&gt;My first attempt to deploy apps with ArgoCD ran into issuesâ€”mainly due to how my repositories were structured. So I spun up a new repo just for Kubernetes manifests:&lt;br&gt;
ðŸ‘‰ &lt;a href=&#34;https://github.com/Ditmanson/argocluster&#34;&gt;Ditmanson/argocluster&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Not my best repo name, but naming is hard.)&lt;/p&gt;
&lt;p&gt;Right now, Iâ€™m focusing on one namespace: &lt;code&gt;hugo&lt;/code&gt;. I moved all related manifestsâ€”Gateways, VirtualServices, PVCs, etc.â€”into a dedicated directory under that namespace.&lt;/p&gt;
&lt;p&gt;The next hiccup? Istio sidecar injection. Since Argo applies manifests declaratively, the namespace needs to be labeled for sidecar injection &lt;strong&gt;before&lt;/strong&gt; the workloads are deployed. Otherwise, your pods wonâ€™t be part of the mesh.&lt;/p&gt;
&lt;p&gt;To solve this, I included a manifest for the namespace itself in the repo. If you&amp;rsquo;re doing something similar, apply the namespace resource first. Or fix it post-deploy with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl rollout restart deployment -n hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-argocd-application-manifest&#34;&gt;The ArgoCD Application Manifest&lt;/h2&gt;
&lt;p&gt;Hereâ€™s what my ArgoCD &lt;code&gt;Application&lt;/code&gt; manifest looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;argoproj.io/v1alpha1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Application&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugoapps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;argocd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;project&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;source&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;repoURL&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://github.com/Ditmanson/argocluster&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;targetRevision&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;HEAD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;destination&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://kubernetes.default.svc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;syncPolicy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;automated&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;prune&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;selfHeal&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;syncPolicy&lt;/code&gt; block isnâ€™t strictly necessaryâ€”especially if you prefer clicking the sync button manuallyâ€”but once I added it, everything synced automatically and cleanly. All green hearts. âœ¨&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bonus-argocd-views&#34;&gt;Bonus: ArgoCD Views&lt;/h2&gt;
&lt;p&gt;Hereâ€™s what it looks like in the ArgoCD UI:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/argocd/argocdapplications.png&#34; alt=&#34;Argo Applications&#34;&gt;&lt;/p&gt;
&lt;p&gt;I wish I had seen a diagram like this when I was struggling with Istio ingress. Itâ€™s not only usefulâ€”it also looks cool.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/argocd/argonetwork.png&#34; alt=&#34;Argo Network&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thatâ€™s it for day one with Argo. Next step: onboard more namespaces, polish up my repo structure, and figure out what belongs in Argo versus what gets handled upstream by Helm or Kustomize.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
